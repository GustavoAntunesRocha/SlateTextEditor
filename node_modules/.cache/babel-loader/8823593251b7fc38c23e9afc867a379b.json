{"ast":null,"code":"var _jsxFileName = \"/home/gustavo/Projetos/mini-google-docs-2/src/components/TextEditor.js\";\n// Import React dependencies.\nimport React, { useEffect, useMemo, useState, useCallback, CodeElement, DefaultElement, Transforms } from \"react\"; // Import the Slate editor factory.\n\nimport { createEditor, Editor } from 'slate'; // Import the Slate components and React plugin.\n\nimport { Slate, Editable, withReact } from 'slate-react';\n\nconst TextEditor = () => {\n  const editor = useMemo(() => withReact(createEditor()), []); // Add the initial value when setting up our state.\n\n  const [value, setValue] = useState([{\n    type: 'paragraph',\n    children: [{\n      text: 'A line of text in a paragraph.'\n    }]\n  }]); // Define a rendering function based on the element passed to `props`. We use\n  // `useCallback` here to memoize the function for subsequent renders.\n\n  return /*#__PURE__*/React.createElement(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Editable, {\n    renderElement: renderElement,\n    onKeyDown: event => {\n      if (event.key === '&') {\n        event.preventDefault();\n        editor.insertText(\"and\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default TextEditor;","map":{"version":3,"sources":["/home/gustavo/Projetos/mini-google-docs-2/src/components/TextEditor.js"],"names":["React","useEffect","useMemo","useState","useCallback","CodeElement","DefaultElement","Transforms","createEditor","Editor","Slate","Editable","withReact","TextEditor","editor","value","setValue","type","children","text","renderElement","event","key","preventDefault","insertText"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,QAApC,EAA8CC,WAA9C,EAA2DC,WAA3D,EAAwEC,cAAxE,EAAwFC,UAAxF,QAA0G,OAA1G,C,CACA;;AACA,SAASC,YAAT,EAAuBC,MAAvB,QAAqC,OAArC,C,CAEA;;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,aAA3C;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACrB,QAAMC,MAAM,GAAGZ,OAAO,CAAC,MAAMU,SAAS,CAACJ,YAAY,EAAb,CAAhB,EAAkC,EAAlC,CAAtB,CADqB,CAErB;;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,CAC/B;AACIc,IAAAA,IAAI,EAAE,WADV;AAEIC,IAAAA,QAAQ,EAAE,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD;AAFd,GAD+B,CAAD,CAAlC,CAHqB,CASrB;AACA;;AAEA,sBACI,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEL,MAAf;AAAuB,IAAA,KAAK,EAAEC,KAA9B;AAAqC,IAAA,QAAQ,EAAEA,KAAK,IAAIC,QAAQ,CAACD,KAAD,CAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD;AACI,IAAA,aAAa,EAAEK,aADnB;AAEI,IAAA,SAAS,EAAEC,KAAK,IAAI;AAClB,UAAIA,KAAK,CAACC,GAAN,KAAc,GAAlB,EAAuB;AACrBD,QAAAA,KAAK,CAACE,cAAN;AACAT,QAAAA,MAAM,CAACU,UAAP,CAAkB,KAAlB;AACD;AACF,KAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAaH,CAzBD;;AA0BA,eAAeX,UAAf","sourcesContent":["// Import React dependencies.\nimport React, { useEffect, useMemo, useState, useCallback, CodeElement, DefaultElement, Transforms } from \"react\";\n// Import the Slate editor factory.\nimport { createEditor, Editor } from 'slate'\n\n// Import the Slate components and React plugin.\nimport { Slate, Editable, withReact } from 'slate-react'\n\nconst TextEditor = () => {\n    const editor = useMemo(() => withReact(createEditor()), [])\n    // Add the initial value when setting up our state.\n    const [value, setValue] = useState([\n        {\n            type: 'paragraph',\n            children: [{ text: 'A line of text in a paragraph.' }],\n        },\n    ])\n    // Define a rendering function based on the element passed to `props`. We use\n    // `useCallback` here to memoize the function for subsequent renders.\n    \n    return (\n        <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n            <Editable\n                renderElement={renderElement}\n                onKeyDown={event => {\n                  if (event.key === '&') {\n                    event.preventDefault()\n                    editor.insertText(\"and\")\n                  }\n                }}\n            />\n        </Slate>\n    )\n}\nexport default TextEditor;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/gustavo/Projetos/mini-google-docs-2/src/components/components.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { cx, css } from 'emotion';\nexport const Button = React.forwardRef(({\n  className,\n  active,\n  reversed,\n  ...props\n}, ref) => /*#__PURE__*/React.createElement(\"span\", Object.assign({}, props, {\n  ref: ref,\n  className: cx(className, css`\n          cursor: pointer;\n          color: ${reversed ? active ? 'white' : '#aaa' : active ? 'black' : '#ccc'};\n        `),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }\n})));\nexport const EditorValue = React.forwardRef(({\n  className,\n  value,\n  ...props\n}, ref) => {\n  const textLines = value.document.nodes.map(node => node.text).toArray().join('\\n');\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: ref\n  }, props, {\n    className: cx(className, css`\n            margin: 30px -20px 0;\n          `),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: css`\n            font-size: 14px;\n            padding: 5px 20px;\n            color: #404040;\n            border-top: 2px solid #eeeeee;\n            background: #f8f8f8;\n          `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"Slate's value as text\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: css`\n            color: #404040;\n            font: 12px monospace;\n            white-space: pre-wrap;\n            padding: 10px 20px;\n            div {\n              margin: 0 0 0.5em;\n            }\n          `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, textLines));\n});\nexport const Icon = React.forwardRef(({\n  className,\n  ...props\n}, ref) => /*#__PURE__*/React.createElement(\"span\", Object.assign({}, props, {\n  ref: ref,\n  className: cx('material-icons', className, css`\n        font-size: 18px;\n        vertical-align: text-bottom;\n      `),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 3\n  }\n})));\nexport const Instruction = React.forwardRef(({\n  className,\n  ...props\n}, ref) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n  ref: ref,\n  className: cx(className, css`\n        white-space: pre-wrap;\n        margin: 0 -20px 10px;\n        padding: 10px 20px;\n        font-size: 14px;\n        background: #f8f8e8;\n      `),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 3\n  }\n})));\nexport const Menu = React.forwardRef(({\n  className,\n  ...props\n}, ref) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n  ref: ref,\n  className: cx(className, css`\n        & > * {\n          display: inline-block;\n        }\n        & > * + * {\n          margin-left: 15px;\n        }\n      `),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 3\n  }\n})));\nexport const Portal = ({\n  children\n}) => {\n  return ReactDOM.createPortal(children, document.body);\n};\nexport const Toolbar = React.forwardRef(({\n  className,\n  ...props\n}, ref) => /*#__PURE__*/React.createElement(Menu, Object.assign({}, props, {\n  ref: ref,\n  className: cx(className, css`\n        position: relative;\n        padding: 1px 18px 17px;\n        margin: 0 -20px;\n        border-bottom: 2px solid #eee;\n        margin-bottom: 20px;\n      `),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 3\n  }\n})));","map":{"version":3,"sources":["/home/gustavo/Projetos/mini-google-docs-2/src/components/components.js"],"names":["React","ReactDOM","cx","css","Button","forwardRef","className","active","reversed","props","ref","EditorValue","value","textLines","document","nodes","map","node","text","toArray","join","Icon","Instruction","Menu","Portal","children","createPortal","body","Toolbar"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { cx, css } from 'emotion'\n\nexport const Button = React.forwardRef(\n  ({ className, active, reversed, ...props }, ref) => (\n    <span\n      {...props}\n      ref={ref}\n      className={cx(\n        className,\n        css`\n          cursor: pointer;\n          color: ${reversed\n            ? active\n              ? 'white'\n              : '#aaa'\n            : active\n            ? 'black'\n            : '#ccc'};\n        `\n      )}\n    />\n  )\n)\n\nexport const EditorValue = React.forwardRef(\n  ({ className, value, ...props }, ref) => {\n    const textLines = value.document.nodes\n      .map(node => node.text)\n      .toArray()\n      .join('\\n')\n    return (\n      <div\n        ref={ref}\n        {...props}\n        className={cx(\n          className,\n          css`\n            margin: 30px -20px 0;\n          `\n        )}\n      >\n        <div\n          className={css`\n            font-size: 14px;\n            padding: 5px 20px;\n            color: #404040;\n            border-top: 2px solid #eeeeee;\n            background: #f8f8f8;\n          `}\n        >\n          Slate's value as text\n        </div>\n        <div\n          className={css`\n            color: #404040;\n            font: 12px monospace;\n            white-space: pre-wrap;\n            padding: 10px 20px;\n            div {\n              margin: 0 0 0.5em;\n            }\n          `}\n        >\n          {textLines}\n        </div>\n      </div>\n    )\n  }\n)\n\nexport const Icon = React.forwardRef(({ className, ...props }, ref) => (\n  <span\n    {...props}\n    ref={ref}\n    className={cx(\n      'material-icons',\n      className,\n      css`\n        font-size: 18px;\n        vertical-align: text-bottom;\n      `\n    )}\n  />\n))\n\nexport const Instruction = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    {...props}\n    ref={ref}\n    className={cx(\n      className,\n      css`\n        white-space: pre-wrap;\n        margin: 0 -20px 10px;\n        padding: 10px 20px;\n        font-size: 14px;\n        background: #f8f8e8;\n      `\n    )}\n  />\n))\n\nexport const Menu = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    {...props}\n    ref={ref}\n    className={cx(\n      className,\n      css`\n        & > * {\n          display: inline-block;\n        }\n        & > * + * {\n          margin-left: 15px;\n        }\n      `\n    )}\n  />\n))\n\nexport const Portal = ({ children }) => {\n  return ReactDOM.createPortal(children, document.body)\n}\n\nexport const Toolbar = React.forwardRef(({ className, ...props }, ref) => (\n  <Menu\n    {...props}\n    ref={ref}\n    className={cx(\n      className,\n      css`\n        position: relative;\n        padding: 1px 18px 17px;\n        margin: 0 -20px;\n        border-bottom: 2px solid #eee;\n        margin-bottom: 20px;\n      `\n    )}\n  />\n))"]},"metadata":{},"sourceType":"module"}
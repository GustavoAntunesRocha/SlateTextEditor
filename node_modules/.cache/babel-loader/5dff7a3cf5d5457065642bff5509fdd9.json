{"ast":null,"code":"var _jsxFileName = \"/home/gustavo/Projetos/mini-google-docs-2/src/components/TextEditor.js\";\n// Import React dependencies.\nimport React, { useEffect, useMemo, useState, useCallback, CodeElement, DefaultElement, Transforms } from \"react\"; // Import the Slate editor factory.\n\nimport { createEditor, Editor } from 'slate'; // Import the Slate components and React plugin.\n\nimport { Slate, Editable, withReact } from 'slate-react';\n\nconst TextEditor = () => {\n  const editor = useMemo(() => withReact(createEditor()), []);\n  const [value, setValue] = useState([{\n    type: 'paragraph',\n    children: [{\n      text: 'A line of text in a paragraph.'\n    }]\n  }]);\n  const renderElement = useCallback(props => {\n    switch (props.element.type) {\n      case 'code':\n        return /*#__PURE__*/React.createElement(CodeElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 18\n          }\n        }));\n\n      default:\n        return /*#__PURE__*/React.createElement(DefaultElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 18\n          }\n        }));\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Editable, {\n    renderElement: renderElement,\n    onKeyDown: event => {\n      if (event.key === '`' && event.ctrlKey) {\n        event.preventDefault(); // Determine whether any of the currently selected blocks are code blocks.\n\n        const [match] = Editor.nodes(editor, {\n          match: n => n.type === 'code'\n        }); // Toggle the block type depending on whether there's already a match.\n\n        Transforms.setNodes(editor, {\n          type: match ? 'paragraph' : 'code'\n        }, {\n          match: n => Editor.isBlock(editor, n)\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default TextEditor;","map":{"version":3,"sources":["/home/gustavo/Projetos/mini-google-docs-2/src/components/TextEditor.js"],"names":["React","useEffect","useMemo","useState","useCallback","CodeElement","DefaultElement","Transforms","createEditor","Editor","Slate","Editable","withReact","TextEditor","editor","value","setValue","type","children","text","renderElement","props","element","event","key","ctrlKey","preventDefault","match","nodes","n","setNodes","isBlock"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,QAApC,EAA8CC,WAA9C,EAA2DC,WAA3D,EAAwEC,cAAxE,EAAwFC,UAAxF,QAA0G,OAA1G,C,CACA;;AACA,SAASC,YAAT,EAAuBC,MAAvB,QAAqC,OAArC,C,CAEA;;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,aAA3C;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACrB,QAAMC,MAAM,GAAGZ,OAAO,CAAC,MAAMU,SAAS,CAACJ,YAAY,EAAb,CAAhB,EAAkC,EAAlC,CAAtB;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,CACjC;AACEc,IAAAA,IAAI,EAAE,WADR;AAEEC,IAAAA,QAAQ,EAAE,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD;AAFZ,GADiC,CAAD,CAAlC;AAOA,QAAMC,aAAa,GAAGhB,WAAW,CAACiB,KAAK,IAAI;AACzC,YAAQA,KAAK,CAACC,OAAN,CAAcL,IAAtB;AACE,WAAK,MAAL;AACE,4BAAO,oBAAC,WAAD,oBAAiBI,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;;AACF;AACE,4BAAO,oBAAC,cAAD,oBAAoBA,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AAJJ;AAMD,GAPgC,EAO9B,EAP8B,CAAjC;AASA,sBACE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEP,MAAf;AAAuB,IAAA,KAAK,EAAEC,KAA9B;AAAqC,IAAA,QAAQ,EAAEA,KAAK,IAAIC,QAAQ,CAACD,KAAD,CAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AACE,IAAA,aAAa,EAAEK,aADjB;AAEE,IAAA,SAAS,EAAEG,KAAK,IAAI;AAClB,UAAIA,KAAK,CAACC,GAAN,KAAc,GAAd,IAAqBD,KAAK,CAACE,OAA/B,EAAwC;AACtCF,QAAAA,KAAK,CAACG,cAAN,GADsC,CAEtC;;AACA,cAAM,CAACC,KAAD,IAAUlB,MAAM,CAACmB,KAAP,CAAad,MAAb,EAAqB;AACnCa,UAAAA,KAAK,EAAEE,CAAC,IAAIA,CAAC,CAACZ,IAAF,KAAW;AADY,SAArB,CAAhB,CAHsC,CAMtC;;AACAV,QAAAA,UAAU,CAACuB,QAAX,CACEhB,MADF,EAEE;AAAEG,UAAAA,IAAI,EAAEU,KAAK,GAAG,WAAH,GAAiB;AAA9B,SAFF,EAGE;AAAEA,UAAAA,KAAK,EAAEE,CAAC,IAAIpB,MAAM,CAACsB,OAAP,CAAejB,MAAf,EAAuBe,CAAvB;AAAd,SAHF;AAKD;AACF,KAhBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAsBD,CAxCH;;AA0CA,eAAehB,UAAf","sourcesContent":["// Import React dependencies.\nimport React, { useEffect, useMemo, useState, useCallback, CodeElement, DefaultElement, Transforms } from \"react\";\n// Import the Slate editor factory.\nimport { createEditor, Editor } from 'slate'\n\n// Import the Slate components and React plugin.\nimport { Slate, Editable, withReact } from 'slate-react'\n\nconst TextEditor = () => {\n    const editor = useMemo(() => withReact(createEditor()), [])\n    const [value, setValue] = useState([\n      {\n        type: 'paragraph',\n        children: [{ text: 'A line of text in a paragraph.' }],\n      },\n    ])\n  \n    const renderElement = useCallback(props => {\n      switch (props.element.type) {\n        case 'code':\n          return <CodeElement {...props} />\n        default:\n          return <DefaultElement {...props} />\n      }\n    }, [])\n  \n    return (\n      <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n        <Editable\n          renderElement={renderElement}\n          onKeyDown={event => {\n            if (event.key === '`' && event.ctrlKey) {\n              event.preventDefault()\n              // Determine whether any of the currently selected blocks are code blocks.\n              const [match] = Editor.nodes(editor, {\n                match: n => n.type === 'code',\n              })\n              // Toggle the block type depending on whether there's already a match.\n              Transforms.setNodes(\n                editor,\n                { type: match ? 'paragraph' : 'code' },\n                { match: n => Editor.isBlock(editor, n) }\n              )\n            }\n          }}\n        />\n      </Slate>\n    )\n  }\n\nexport default TextEditor;"]},"metadata":{},"sourceType":"module"}